

// Game Attributes
package snakeprojecttest;



import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;


 
public class Gamepanel extends JPanel implements Runnable, KeyListener {
   

   //private static final long serialVersionUID = 1L; 
   public static final int WIDTH = 500, HEIGHT = 500;
   
   private Thread thread ;
   private boolean running;
   
   private boolean right = true, left = false, up = false, down =  false;
   
  
   
   
   private BodyPart body;
   private ArrayList<BodyPart> snake;
   
   private Apple apple;
   private ArrayList<Apple> apples;
   private Random r;

   
   
   private int xAxis  = 10, yAxis = 10, size = 6;
   private int moving = 0;
   
   
   static int Apples = 0, x=10,y=20;
   static int level = 1, xcor=140,ycor=20;
   
    public Gamepanel(){
        setFocusable(true);
        setPreferredSize(new Dimension(WIDTH,HEIGHT));
        addKeyListener(this);
        
        snake = new ArrayList<BodyPart>();
        apples = new ArrayList<Apple>();
        r = new Random();
        
        
        start();
    }
    public void start(){
        running = true;
        thread = new Thread(this);
        thread.start();
    }
    public void stop(){
        running = false;
       try {
           thread.join();
       } catch (InterruptedException e) {
           e.printStackTrace();
       }
    }
    public void movement(){
        if(snake.size() == 0){
            body = new BodyPart(xAxis,yAxis,10);
            snake.add(body);
        }
        moving++;
        if(moving > 1000000){
            if(right) xAxis++;
            if(left) xAxis--;
            if(up) yAxis--;
            if(down) yAxis++;
            
            
            moving = 0;
            
         
            body = new BodyPart(xAxis, yAxis, 10); 
            snake.add(body);
            if(snake.size() > size){
                snake.remove(0); 
            }
        }
        if(apples.size() == 0){
            int xCoor = r.nextInt(50);
            int yCoor = r.nextInt(50);
      
            apple = new Apple(xCoor,yCoor,10);
            apples.add(apple);
        }
        for(int i = 0; i  < apples.size(); i++){
            if(xAxis == apples.get(i).getxCoor() && yAxis == apples.get(i).getyCoor()){
                size++;
                Apples++;
                apples.remove(i);
                i++;  
                /*if(Apples % 1 == 0){
                    level++;
                    
              
                    
                }*/
                
            }
        }
        
        // die on its body
        for(int i = 0; i < snake.size(); i++){
            if(xAxis == snake.get(i).getxCoor() && yAxis == snake.get(i).getyCoor()){
                if(i != snake.size()- 1){
                    System.out.println("GAME OVER!");
                    stop();
                   
                }
            }
            
        }
        //die on border
        if(xAxis < 0 || xAxis > 49 || yAxis < 0 || yAxis > 49){
            System.out.println("GAME OVER!");
            stop();
            
        }
    }
    public void paint(Graphics g){
        g.clearRect(0, 0, WIDTH, HEIGHT);
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, WIDTH, HEIGHT);
        
        
        for(int i = 0; i < WIDTH/10; i++){
            g.drawLine(i*10, 0, i*10, HEIGHT);
        }
        for(int i = 0; i < HEIGHT/10; i++){
            g.drawLine(0,i*10,HEIGHT,i*10);
        }
        for(int i = 0; i < snake.size(); i++){
            snake.get(i).draw(g);
        }
         
       //EATEN APPLES
       g.setColor(Color.white);
       g.setFont(new Font("Courier New",Font.PLAIN, 20));
       g.drawString("Apples: " +Apples, x, y);
       /*g.setColor(Color.white);
       g.setFont(new Font("Courier New",Font.PLAIN, 20));
       g.drawString("Level: " +level, xcor, ycor);*/
       
       
        
        //apple 
        for(int i = 0; i < apples.size(); i++ ){
            apples.get(i).draw(g);
            
        }
        
        
    }

    @Override
    public void run() {
        while(running){
            movement();
            repaint();
        }
    }
    
    

    @Override
    public void keyTyped(KeyEvent e) {
        
       
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        
        if(key == KeyEvent.VK_RIGHT && !left){
            right = true;
            up = false;
            down = false;
        }
        if(key == KeyEvent.VK_LEFT && !right){
            left = true;
            up = false;
            down = false;
        }
        
        if(key == KeyEvent.VK_UP && !down){
            up = true;
            left = false;
            right = false;
           
        }
        if(key == KeyEvent.VK_DOWN && !up){
            down =true;
            left = false;
            right = false;
           
        }
        // Letters
        if(key == KeyEvent.VK_D && !left){
            right = true;
            up = false;
            down = false;
        }
        if(key == KeyEvent.VK_A && !right){
            left = true;
            up = false;
            down = false;
        }
        
        if(key == KeyEvent.VK_W && !down){
            up = true;
            left = false;
            right = false;
           
        }
        if(key == KeyEvent.VK_S && !up){
            down =true;
            left = false;
            right = false;
           
        }
        
        
        
        
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
        
       
        
    }
    
    
    

 
}
